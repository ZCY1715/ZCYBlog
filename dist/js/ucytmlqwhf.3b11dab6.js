import{d as s,o as a,c as o,a as p}from"./@vue.25a72e45.js";const e="/assets/webp/34481231766189A1A47AD272D4C6EA85.95a63bb4.webp",t={class:"markdown-body"},c=p('<h2>\u683C\u5F0F</h2><div class="code-wrapper"><div class="heading-row no-heading show-lang"><span class="lang-display"></span></div><div class="code-block language-markdown no-line-numbers" data-lang="" data-modifiers=""><pre class="language-markdown" data-lang=""><code class="code-line odd first-row line-1">data:<span class="token url">[<span class="token content">&lt;mime type&gt;</span>][<span class="token variable">;base64</span>]</span>,<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span></code></pre></div></div><p>\u5176\u4E2D <code>data</code> \u4E3A\u6570\u636E\u672C\u8EAB</p><h2>\u7531\u6765</h2><p>\u4E3A\u4EC0\u4E48\u4F1A\u6709Base64\u7F16\u7801\u5462\uFF1F\u56E0\u4E3A\u6709\u4E9B<strong>\u7F51\u7EDC\u4F20\u9001\u6E20\u9053\u5E76\u4E0D\u652F\u6301\u6240\u6709\u7684\u5B57\u8282</strong>\uFF0C\u4F8B\u5982\u4F20\u7EDF\u7684\u90AE\u4EF6\u53EA\u652F\u6301\u53EF\u89C1\u5B57\u7B26\u7684\u4F20\u9001\uFF0C\u50CFASCII\u7801\u7684\u63A7\u5236\u5B57\u7B26\u5C31\u4E0D\u80FD\u901A\u8FC7\u90AE\u4EF6\u4F20\u9001\u3002\u8FD9\u6837\u7528\u9014\u5C31\u53D7\u5230\u4E86\u5F88\u5927\u7684\u9650\u5236\uFF0C\u6BD4\u5982\u56FE\u7247\u4E8C\u8FDB\u5236\u6D41\u7684\u6BCF\u4E2A\u5B57\u8282\u4E0D\u53EF\u80FD\u5168\u90E8\u662F\u53EF\u89C1\u5B57\u7B26\uFF0C\u6240\u4EE5\u5C31\u4F20\u9001\u4E0D\u4E86\u3002\u6700\u597D\u7684\u65B9\u6CD5\u5C31\u662F\u5728\u4E0D\u6539\u53D8\u4F20\u7EDF\u534F\u8BAE\u7684\u60C5\u51B5\u4E0B\uFF0C\u505A\u4E00\u79CD\u6269\u5C55\u65B9\u6848\u6765<strong>\u652F\u6301\u4E8C\u8FDB\u5236\u6587\u4EF6\u7684\u4F20\u9001</strong>\u3002\u628A\u4E0D\u53EF\u6253\u5370\u7684\u5B57\u7B26\u4E5F\u80FD\u7528\u53EF\u6253\u5370\u5B57\u7B26\u6765\u8868\u793A\uFF0C\u95EE\u9898\u5C31\u89E3\u51B3\u4E86\u3002Base64\u7F16\u7801\u5E94\u8FD0\u800C\u751F\uFF0CBase64\u5C31\u662F\u4E00\u79CD\u57FA\u4E8E64\u4E2A\u53EF\u6253\u5370\u5B57\u7B26\u6765\u8868\u793A\u4E8C\u8FDB\u5236\u6570\u636E\u7684\u8868\u793A\u65B9\u6CD5\u3002</p><h2>\u7F16\u7801\u7D22\u5F15</h2><p>Base64\u7684\u7D22\u5F15\u8868\u5982\u4E0B\uFF0C\u5B57\u7B26\u9009\u7528\u4E86&quot;A-Z\u3001a-z\u30010-9\u3001+\u3001/&quot; 64\u4E2A\u53EF\u6253\u5370\u5B57\u7B26\u3002\u6570\u503C\u4EE3\u8868\u5B57\u7B26\u7684\u7D22\u5F15\uFF0C\u8FD9\u4E2A\u662F\u6807\u51C6Base64\u534F\u8BAE\u89C4\u5B9A\u7684\uFF0C\u4E0D\u80FD\u66F4\u6539\u3002</p><p><img src="'+e+`" alt="img"></p><h2>\u7F16\u7801\u539F\u7406</h2><p>Base64\u7684\u7801\u8868\u53EA\u670964\u4E2A\u5B57\u7B26\uFF0C \u5982\u679C\u8981\u8868\u8FBE64\u4E2A\u5B57\u7B26\u7684\u8BDD\uFF0C\u4F7F\u75286\u4E2A bit \u5373\u53EF\u5B8C\u5168\u8868\u793A(2^6\u4E3A64)\u3002\u56E0\u4E3ABase64\u7684\u7F16\u7801\u53EA\u67096\u4E2Abit\u5373\u53EF\u8868\u793A\uFF0C\u800C\u6B63\u5E38\u7684\u5B57\u7B26\u662F\u4F7F\u75288\u4E2Abit\u8868\u793A\uFF0C 8\u548C6\u7684\u6700\u5C0F\u516C\u500D\u6570\u662F24\uFF0C\u6240\u4EE54\u4E2ABase64\u5B57\u7B26\u53EF\u4EE5\u8868\u793A3\u4E2A\u6807\u51C6\u7684ascll\u5B57\u7B26\uFF1B</p><p>\u5BF9\u4EE5\u67D0\u7F16\u7801\u65B9\u5F0F\u7F16\u7801\u540E\u7684\u5B57\u8282\u6570\u7EC4\u4E3A\u5BF9\u8C61\uFF0C\u4EE53\u4E2A\u5B57\u8282\u4E3A\u4E00\u7EC4\uFF0C\u6309\u987A\u5E8F\u6392\u521724bit\u6570\u636E\uFF0C\u7136\u540E\u4EE56bit\u4E00\u7EC4\u5206\u62104\u7EC4\uFF1B\u518D\u5728\u6BCF\u7EC4\u7684\u6700\u9AD8\u4F4D\u88652\u4E2A0\u51D1\u8DB3\u4E00\u4E2A\u5B57\u8282\u3002\u8FD9\u65F6\u4E00\u7EC4\u5C31\u67094\u4E2A\u5B57\u8282\u4E86\u3002\u82E5\u5B57\u8282\u6570\u7EC4\u4E0D\u662F3\u7684\u500D\u6570\uFF0C\u90A3\u4E48\u6700\u540E\u4E00\u7EC4\u5C31\u586B\u51451\u52302\u4E2A0\u5B57\u8282\uFF1B</p><p>\u7136\u540E\u6309Base64\u7F16\u7801\u65B9\u5F0F\uFF08\u5C31\u662F\u6620\u5C04\u5173\u7CFB\uFF09\u5BF9\u5B57\u8282\u6570\u7EC4\u8FDB\u884C\u89E3\u7801\uFF0C\u5C31\u4F1A\u5F97\u5230\u5E73\u65F6\u770B\u5230\u7684Base64\u7F16\u7801\u6587\u672C\u3002\u5BF9\u4E8E\u5B57\u8282\u6570\u7EC4\u4E0D\u662F3\u7684\u500D\u6570\uFF0C\u6700\u540E\u4E00\u7EC4\u586B\u51451\u52302\u4E2A0\u5B57\u8282\u7684\u60C5\u51B5\uFF0C\u586B\u8865\u76840\u5B57\u8282\u5BF9\u5E94\u7684\u662F=\uFF08\u7B49\u53F7\uFF09\u3002</p><h2>\u5B9E\u73B0</h2><div class="code-wrapper"><div class="heading-row no-heading show-lang"><span class="lang-display">js</span></div><div class="code-block language-javascript no-line-numbers" data-lang="js" data-modifiers=""><pre class="language-javascript" data-lang="js"><code class="code-line odd first-row line-1"><span class="token keyword">function</span> <span class="token function">Base64</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-2"></code>
<code class="code-line odd line-3">    <span class="token comment">// private property  </span></code>
<code class="code-line even line-4">    _keyStr <span class="token operator">=</span> <span class="token string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-5"></code>
<code class="code-line even line-6">    <span class="token comment">// public method for encoding  </span></code>
<code class="code-line odd line-7">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">encode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-8">        <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-9">        <span class="token keyword">let</span> chr1<span class="token punctuation">,</span> chr2<span class="token punctuation">,</span> chr3<span class="token punctuation">,</span> enc1<span class="token punctuation">,</span> enc2<span class="token punctuation">,</span> enc3<span class="token punctuation">,</span> enc4<span class="token punctuation">;</span></code>
<code class="code-line even line-10">        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-11">        input <span class="token operator">=</span> <span class="token function">_utf8_encode</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-12">        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-13">            chr1 <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-14">            chr2 <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-15">            chr3 <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-16">            enc1 <span class="token operator">=</span> chr1 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-17">            enc2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>chr1 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>chr2 <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-18">            enc3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>chr2 <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>chr3 <span class="token operator">&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-19">            enc4 <span class="token operator">=</span> chr3 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">;</span></code>
<code class="code-line even line-20">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>chr2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-21">                enc3 <span class="token operator">=</span> enc4 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span></code>
<code class="code-line even line-22">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span>chr3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-23">                enc4 <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span></code>
<code class="code-line even line-24">            <span class="token punctuation">}</span></code>
<code class="code-line odd line-25">            output <span class="token operator">=</span> output <span class="token operator">+</span></code>
<code class="code-line even line-26">                _keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc1<span class="token punctuation">)</span> <span class="token operator">+</span> _keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc2<span class="token punctuation">)</span> <span class="token operator">+</span></code>
<code class="code-line odd line-27">                _keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc3<span class="token punctuation">)</span> <span class="token operator">+</span> _keyStr<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>enc4<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-28">        <span class="token punctuation">}</span></code>
<code class="code-line odd line-29">        <span class="token keyword">return</span> output<span class="token punctuation">;</span></code>
<code class="code-line even line-30">    <span class="token punctuation">}</span></code>
<code class="code-line odd line-31"></code>
<code class="code-line even line-32">    <span class="token comment">// public method for decoding  </span></code>
<code class="code-line odd line-33">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">decode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-34">        <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-35">        <span class="token keyword">let</span> chr1<span class="token punctuation">,</span> chr2<span class="token punctuation">,</span> chr3<span class="token punctuation">;</span></code>
<code class="code-line even line-36">        <span class="token keyword">let</span> enc1<span class="token punctuation">,</span> enc2<span class="token punctuation">,</span> enc3<span class="token punctuation">,</span> enc4<span class="token punctuation">;</span></code>
<code class="code-line odd line-37">        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code>
<code class="code-line even line-38">        input <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^A-Za-z0-9\\+\\/\\=]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-39">        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> input<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-40">            enc1 <span class="token operator">=</span> _keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-41">            enc2 <span class="token operator">=</span> _keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-42">            enc3 <span class="token operator">=</span> _keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-43">            enc4 <span class="token operator">=</span> _keyStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-44">            chr1 <span class="token operator">=</span> <span class="token punctuation">(</span>enc1 <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>enc2 <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-45">            chr2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>enc2 <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>enc3 <span class="token operator">&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-46">            chr3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>enc3 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> enc4<span class="token punctuation">;</span></code>
<code class="code-line odd line-47">            output <span class="token operator">=</span> output <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>chr1<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-48">            <span class="token keyword">if</span> <span class="token punctuation">(</span>enc3 <span class="token operator">!=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-49">                output <span class="token operator">=</span> output <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>chr2<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-50">            <span class="token punctuation">}</span></code>
<code class="code-line odd line-51">            <span class="token keyword">if</span> <span class="token punctuation">(</span>enc4 <span class="token operator">!=</span> <span class="token number">64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-52">                output <span class="token operator">=</span> output <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>chr3<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-53">            <span class="token punctuation">}</span></code>
<code class="code-line even line-54">        <span class="token punctuation">}</span></code>
<code class="code-line odd line-55">        output <span class="token operator">=</span> <span class="token function">_utf8_decode</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-56">        <span class="token keyword">return</span> output<span class="token punctuation">;</span></code>
<code class="code-line odd line-57">    <span class="token punctuation">}</span></code>
<code class="code-line even line-58"></code>
<code class="code-line odd line-59">    <span class="token comment">// private method for UTF-8 encoding  </span></code>
<code class="code-line even line-60">    <span class="token function-variable function">_utf8_encode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-61">        string <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-62">        <span class="token keyword">let</span> utftext <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-63">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> string<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-64">            <span class="token keyword">let</span> c <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-65">            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-66">                utftext <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-67">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">2048</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-68">                utftext <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">192</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-69">                utftext <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-70">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-71">                utftext <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-72">                utftext <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;&gt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-73">                utftext <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-74">            <span class="token punctuation">}</span></code>
<code class="code-line odd line-75"></code>
<code class="code-line even line-76">        <span class="token punctuation">}</span></code>
<code class="code-line odd line-77">        <span class="token keyword">return</span> utftext<span class="token punctuation">;</span></code>
<code class="code-line even line-78">    <span class="token punctuation">}</span></code>
<code class="code-line odd line-79"></code>
<code class="code-line even line-80">    <span class="token comment">// private method for UTF-8 decoding  </span></code>
<code class="code-line odd line-81">    <span class="token function-variable function">_utf8_decode</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">utftext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-82">        <span class="token keyword">let</span> string <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-83">        <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code>
<code class="code-line even line-84">        <span class="token keyword">let</span> c <span class="token operator">=</span> c1 <span class="token operator">=</span> c2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-85">        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> utftext<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-86">            c <span class="token operator">=</span> utftext<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-87">            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-88">                string <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-89">                i<span class="token operator">++</span><span class="token punctuation">;</span></code>
<code class="code-line even line-90">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&gt;</span> <span class="token number">191</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-91">                c2 <span class="token operator">=</span> utftext<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-92">                string <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">31</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c2 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-93">                i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span></code>
<code class="code-line even line-94">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-95">                c2 <span class="token operator">=</span> utftext<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-96">                c3 <span class="token operator">=</span> utftext<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-97">                string <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c2 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>c3 <span class="token operator">&amp;</span> <span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>
<code class="code-line even line-98">                i <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span></code>
<code class="code-line odd line-99">            <span class="token punctuation">}</span></code>
<code class="code-line even line-100">        <span class="token punctuation">}</span></code>
<code class="code-line odd line-101">        <span class="token keyword">return</span> string<span class="token punctuation">;</span></code>
<code class="code-line even line-102">    <span class="token punctuation">}</span></code>
<code class="code-line odd last-row line-103"><span class="token punctuation">}</span></code></pre></div></div><h2>\u5DE5\u5177\u51FD\u6570</h2><div class="code-wrapper"><div class="heading-row no-heading show-lang"><span class="lang-display">js</span></div><div class="code-block language-javascript no-line-numbers" data-lang="js" data-modifiers=""><pre class="language-javascript" data-lang="js"><code class="code-line odd first-row line-1"><span class="token keyword">function</span> <span class="token function">stringToBase64</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-2">  <span class="token keyword">return</span> <span class="token function">btoa</span><span class="token punctuation">(</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-3"><span class="token punctuation">}</span></code>
<code class="code-line even line-4"></code>
<code class="code-line odd line-5"><span class="token keyword">function</span> <span class="token function">base64ToString</span><span class="token punctuation">(</span><span class="token parameter">base64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-6">  <span class="token keyword">return</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span><span class="token function">atob</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-7"><span class="token punctuation">}</span></code>
<code class="code-line even line-8"></code>
<code class="code-line odd line-9"><span class="token keyword">function</span> <span class="token function">blobToBase64</span><span class="token punctuation">(</span><span class="token parameter">blob</span><span class="token punctuation">)</span><span class="token punctuation">{</span></code>
<code class="code-line even line-10">	<span class="token keyword">const</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-11">	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-12">		fileReader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">)</span></code>
<code class="code-line odd line-13">		fileReader<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span></code>
<code class="code-line even line-14">		fileReader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span></code>
<code class="code-line odd line-15">    <span class="token punctuation">}</span><span class="token punctuation">)</span></code>
<code class="code-line even line-16"><span class="token punctuation">}</span></code>
<code class="code-line odd line-17"></code>
<code class="code-line even line-18"><span class="token keyword">function</span> <span class="token function">base64ToBlob</span><span class="token punctuation">(</span><span class="token parameter">base64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-19">  <span class="token keyword">const</span> mimeString <span class="token operator">=</span> base64<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></code>
<code class="code-line even line-20">  <span class="token keyword">const</span> byteString <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-21">  <span class="token keyword">const</span> arrayBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>byteString<span class="token punctuation">.</span>length<span class="token punctuation">)</span></code>
<code class="code-line even line-22">  <span class="token keyword">const</span> intArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>arrayBuffer<span class="token punctuation">)</span></code>
<code class="code-line odd line-23">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> byteString<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-24">    intArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> byteString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code>
<code class="code-line odd line-25">  <span class="token punctuation">}</span></code>
<code class="code-line even line-26">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>intArray<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> mimeString <span class="token punctuation">}</span><span class="token punctuation">)</span></code>
<code class="code-line odd last-row line-27"><span class="token punctuation">}</span></code></pre></div></div>`,16),u=[c],d={title:null,tags:null,categories:null,description:"\u524D\u7AEF\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528 base64 \u5462\uFF1Fbase64 \u662F\u600E\u4E48\u7F16\u7801\u7684\uFF1F",publishTime:"2022-09-28T02:19:25.000Z",updateTime:null,img:null,toc:!0,comment:!0,publish:!0},F="",m=s({__name:"index",setup(l,{expose:n}){return n({frontmatter:{title:null,tags:null,categories:null,description:"\u524D\u7AEF\u4E3A\u4EC0\u4E48\u8981\u4F7F\u7528 base64 \u5462\uFF1Fbase64 \u662F\u600E\u4E48\u7F16\u7801\u7684\uFF1F",publishTime:"2022-09-28T02:19:25.000Z",updateTime:null,img:null,toc:!0,comment:!0,publish:!0},excerpt:void 0}),(i,k)=>(a(),o("div",t,u))}});export{m as default,F as excerpt,d as frontmatter};
