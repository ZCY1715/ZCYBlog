import{d as s,o as a,c as e,a as o}from"./@vue.e5d9c594.js";const p={class:"markdown-body"},t=o(`<p><strong>\u6570\u7EC4\u5B9E\u73B0\u7EBF\u6BB5\u6811</strong></p><p>\u5DF2\u77E5\u6570\u7EC4\u5927\u5C0F\u4E14\u5927\u5C0F\u4E0D\u53D8</p><ul><li>\u548C</li><li>\u6700\u5927\u503C | \u6700\u5C0F\u503C</li><li>\u6700\u5927\u516C\u7EA6\u6570 | \u6700\u5C0F\u516C\u500D\u6570</li><li>\u533A\u95F4\u5185\u6EE1\u8DB3\u8981\u6C42\u6570\u7684\u6570\u91CF</li><li>\u7B49 \u2026</li></ul><div class="code-wrapper"><div class="heading-row no-heading show-lang"><span class="lang-display">js</span></div><div class="code-block language-javascript no-line-numbers" data-lang="js" data-modifiers=""><pre class="language-javascript" data-lang="js"><code class="code-line odd first-row line-1"><span class="token keyword">class</span> <span class="token class-name">SegmentTree</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-2"></code>
<code class="code-line odd line-3">  <span class="token comment">/**</span></code>
<code class="code-line even line-4">   <span class="token operator">*</span> </code>
<code class="code-line odd line-5">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>Array<span class="token punctuation">}</span> initArr </code>
<code class="code-line even line-6">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">leftValue<span class="token punctuation">,</span> rightValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> parentValue<span class="token punctuation">}</span> pushUp</code>
<code class="code-line odd line-7">   <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line even line-8">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">initArr<span class="token punctuation">,</span> pushUp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-9">    <span class="token keyword">this</span><span class="token punctuation">.</span>_pushUp <span class="token operator">=</span> pushUp</code>
<code class="code-line even line-10">    <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>initArr<span class="token punctuation">]</span></code>
<code class="code-line odd line-11">    <span class="token keyword">this</span><span class="token punctuation">.</span>_tree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code>
<code class="code-line even line-12">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-13">  <span class="token punctuation">}</span></code>
<code class="code-line even line-14"></code>
<code class="code-line odd line-15">  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-16">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">.</span>length</code>
<code class="code-line odd line-17">  <span class="token punctuation">}</span></code>
<code class="code-line even line-18"></code>
<code class="code-line odd line-19">  <span class="token function">leftChild</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-20">    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span></code>
<code class="code-line odd line-21">  <span class="token punctuation">}</span></code>
<code class="code-line even line-22"></code>
<code class="code-line odd line-23">  <span class="token function">rightChild</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-24">    <span class="token keyword">return</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span></code>
<code class="code-line odd line-25">  <span class="token punctuation">}</span></code>
<code class="code-line even line-26"></code>
<code class="code-line odd line-27">  <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token parameter">nodeIndex<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-28">    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-29">      <span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">[</span>left<span class="token punctuation">]</span></code>
<code class="code-line even line-30">      <span class="token keyword">return</span></code>
<code class="code-line odd line-31">    <span class="token punctuation">}</span></code>
<code class="code-line even line-32">    <span class="token keyword">const</span> leftChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">leftChild</span><span class="token punctuation">(</span>nodeIndex<span class="token punctuation">)</span></code>
<code class="code-line odd line-33">    <span class="token keyword">const</span> rightChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rightChild</span><span class="token punctuation">(</span>nodeIndex<span class="token punctuation">)</span></code>
<code class="code-line even line-34">    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-35">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">,</span> left<span class="token punctuation">,</span> middle<span class="token punctuation">)</span></code>
<code class="code-line even line-36">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span></code>
<code class="code-line odd line-37">    <span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_pushUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>leftChild<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>rightChild<span class="token punctuation">]</span><span class="token punctuation">)</span></code>
<code class="code-line even line-38">  <span class="token punctuation">}</span></code>
<code class="code-line odd line-39"></code>
<code class="code-line even line-40">  <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">queryLeft<span class="token punctuation">,</span> queryRight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-41">    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryLeft <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> queryRight <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-42">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Query range is out of whole range !&quot;</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-43">    <span class="token punctuation">}</span></code>
<code class="code-line even line-44">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> queryLeft<span class="token punctuation">,</span> queryRight<span class="token punctuation">)</span></code>
<code class="code-line odd line-45">  <span class="token punctuation">}</span></code>
<code class="code-line even line-46"></code>
<code class="code-line odd line-47">  <span class="token function">queryNode</span><span class="token punctuation">(</span><span class="token parameter">nodeIndex<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> queryLeft<span class="token punctuation">,</span> queryRight</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-48">    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryLeft <span class="token operator">&lt;=</span> left <span class="token operator">&amp;&amp;</span> queryRight <span class="token operator">&gt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-49">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span></code>
<code class="code-line even line-50">    <span class="token punctuation">}</span></code>
<code class="code-line odd line-51">    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></code>
<code class="code-line even line-52">    <span class="token keyword">const</span> leftChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">leftChild</span><span class="token punctuation">(</span>nodeIndex<span class="token punctuation">)</span></code>
<code class="code-line odd line-53">    <span class="token keyword">const</span> rightChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rightChild</span><span class="token punctuation">(</span>nodeIndex<span class="token punctuation">)</span></code>
<code class="code-line even line-54">    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryLeft <span class="token operator">&gt;=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> queryLeft<span class="token punctuation">,</span> queryRight<span class="token punctuation">)</span></code>
<code class="code-line odd line-55">    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryRight <span class="token operator">&lt;=</span> middle<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">,</span> left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> queryLeft<span class="token punctuation">,</span> queryRight<span class="token punctuation">)</span></code>
<code class="code-line even line-56">    <span class="token keyword">const</span> leftValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">,</span> left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> queryLeft<span class="token punctuation">,</span> queryRight<span class="token punctuation">)</span></code>
<code class="code-line odd line-57">    <span class="token keyword">const</span> rightValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> queryLeft<span class="token punctuation">,</span> queryRight<span class="token punctuation">)</span></code>
<code class="code-line even line-58">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_pushUp</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">,</span> rightValue<span class="token punctuation">)</span></code>
<code class="code-line odd line-59">  <span class="token punctuation">}</span></code>
<code class="code-line even line-60"></code>
<code class="code-line odd line-61">  <span class="token function">updata</span><span class="token punctuation">(</span><span class="token parameter">index<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-62">    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-63">      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;index is out of range !&quot;</span><span class="token punctuation">)</span></code>
<code class="code-line even line-64">    <span class="token punctuation">}</span></code>
<code class="code-line odd line-65">    <span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value</code>
<code class="code-line even line-66">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span></code>
<code class="code-line odd line-67">  <span class="token punctuation">}</span></code>
<code class="code-line even line-68"></code>
<code class="code-line odd line-69">  <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token parameter">nodeIndex<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-70">    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">===</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-71">      <span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span></code>
<code class="code-line even line-72">      <span class="token keyword">return</span></code>
<code class="code-line odd line-73">    <span class="token punctuation">}</span></code>
<code class="code-line even line-74">    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-75">    <span class="token keyword">const</span> leftChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">leftChild</span><span class="token punctuation">(</span>nodeIndex<span class="token punctuation">)</span></code>
<code class="code-line even line-76">    <span class="token keyword">const</span> rightChild <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">rightChild</span><span class="token punctuation">(</span>nodeIndex<span class="token punctuation">)</span></code>
<code class="code-line odd line-77">    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span>rightChild<span class="token punctuation">,</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> index<span class="token punctuation">)</span></code>
<code class="code-line even line-78">    <span class="token keyword">else</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span>leftChild<span class="token punctuation">,</span> left<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> index<span class="token punctuation">)</span></code>
<code class="code-line odd line-79">    <span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_pushUp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>leftChild<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_tree<span class="token punctuation">[</span>rightChild<span class="token punctuation">]</span><span class="token punctuation">)</span></code>
<code class="code-line even line-80">  <span class="token punctuation">}</span></code>
<code class="code-line odd line-81"></code>
<code class="code-line even last-row line-82"><span class="token punctuation">}</span></code></pre></div></div><p><strong>\u94FE\u8868\u5B9E\u73B0\u7EBF\u6BB5\u6811</strong></p><p>\u67E5\u8BE2\u4E0E\u4FEE\u6539\u540C\u6B65\uFF1B\u52A8\u6001\u5F00\u70B9\uFF1B\u61D2\u6807\u8BB0\u4FEE\u6539\u533A\u95F4</p><ul><li>\u524D\u540E\u6EE1\u8DB3\u8981\u6C42\u6570\u7684\u6570\u91CF</li><li>\u533A\u95F4\u63D2\u5165</li></ul><div class="code-wrapper"><div class="heading-row no-heading show-lang"><span class="lang-display">js</span></div><div class="code-block language-javascript no-line-numbers" data-lang="js" data-modifiers=""><pre class="language-javascript" data-lang="js"><code class="code-line odd first-row line-1"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-2">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> initValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-3">    <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start</code>
<code class="code-line even line-4">    <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end</code>
<code class="code-line odd line-5">    <span class="token comment">/**</span></code>
<code class="code-line even line-6">     <span class="token operator">*</span> @type <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></code>
<code class="code-line odd line-7">     <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line even line-8">    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span></code>
<code class="code-line odd line-9">    <span class="token comment">/**</span></code>
<code class="code-line even line-10">     <span class="token operator">*</span> @type <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span></code>
<code class="code-line odd line-11">     <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line even line-12">    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span></code>
<code class="code-line odd line-13">    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> initValue</code>
<code class="code-line even line-14">    <span class="token keyword">this</span><span class="token punctuation">.</span>isLazy <span class="token operator">=</span> <span class="token boolean">false</span></code>
<code class="code-line odd line-15">    <span class="token keyword">this</span><span class="token punctuation">.</span>LazyFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code>
<code class="code-line even line-16">  <span class="token punctuation">}</span></code>
<code class="code-line odd line-17"><span class="token punctuation">}</span></code>
<code class="code-line even line-18"></code>
<code class="code-line odd line-19"><span class="token keyword">class</span> <span class="token class-name">SegmentTree</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-20"></code>
<code class="code-line odd line-21">  <span class="token comment">/**</span></code>
<code class="code-line even line-22">   <span class="token operator">*</span> </code>
<code class="code-line odd line-23">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> start \u7EBF\u6BB5\u8D77\u70B9</code>
<code class="code-line even line-24">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> end \u7EBF\u6BB5\u7EC8\u70B9</code>
<code class="code-line odd line-25">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> initValue<span class="token punctuation">}</span> init \u5F62\u6210 TreeNode \u7684\u521D\u59CB\u503C</code>
<code class="code-line even line-26">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">leftValue<span class="token punctuation">,</span> rightValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> parentValue<span class="token punctuation">}</span> pushUp  \u5411\u4E0A\u5408\u5E76</code>
<code class="code-line odd line-27">   <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line even line-28">  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> init<span class="token punctuation">,</span> pushUp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-29">    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>
<code class="code-line even line-30">    <span class="token keyword">this</span><span class="token punctuation">.</span>_init <span class="token operator">=</span> init</code>
<code class="code-line odd line-31">    <span class="token keyword">this</span><span class="token punctuation">.</span>_pushUp <span class="token operator">=</span> pushUp</code>
<code class="code-line even line-32">  <span class="token punctuation">}</span></code>
<code class="code-line odd line-33"></code>
<code class="code-line even line-34">  <span class="token comment">/**</span></code>
<code class="code-line odd line-35">   <span class="token operator">*</span> </code>
<code class="code-line even line-36">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> node </code>
<code class="code-line odd line-37">   <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line even line-38">  <span class="token function">pushDown</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-39">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span></code>
<code class="code-line even line-40">    <span class="token keyword">const</span> middle <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">+</span> node<span class="token punctuation">.</span>end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-41">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> node<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>
<code class="code-line even line-42">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span> node<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>end<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code>
<code class="code-line odd line-43">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>isLazy<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-44">      node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>isLazy <span class="token operator">=</span> <span class="token boolean">true</span></code>
<code class="code-line odd line-45">      node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>LazyFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>node<span class="token punctuation">.</span>LazyFns<span class="token punctuation">]</span></code>
<code class="code-line even line-46">      node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">=</span> node<span class="token punctuation">.</span>LazyFns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> Fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code>
<code class="code-line odd line-47">      node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>isLazy <span class="token operator">=</span> <span class="token boolean">true</span></code>
<code class="code-line even line-48">      node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>LazyFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>node<span class="token punctuation">.</span>LazyFns<span class="token punctuation">]</span></code>
<code class="code-line odd line-49">      node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value <span class="token operator">=</span> node<span class="token punctuation">.</span>LazyFns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> Fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Fn</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code>
<code class="code-line even line-50">      node<span class="token punctuation">.</span>isLazy <span class="token operator">=</span> <span class="token boolean">false</span></code>
<code class="code-line odd line-51">      node<span class="token punctuation">.</span>LazyFns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code>
<code class="code-line even line-52">    <span class="token punctuation">}</span></code>
<code class="code-line odd line-53">  <span class="token punctuation">}</span></code>
<code class="code-line even line-54"></code>
<code class="code-line odd line-55">  <span class="token comment">/**</span></code>
<code class="code-line even line-56">   <span class="token operator">*</span> </code>
<code class="code-line odd line-57">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span> start </code>
<code class="code-line even line-58">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span> end </code>
<code class="code-line odd line-59">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">originValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> newValue<span class="token punctuation">}</span> modifyValueFn </code>
<code class="code-line even line-60">   <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line odd line-61">  <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> modifyValueFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-62">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> modifyValueFn<span class="token punctuation">)</span></code>
<code class="code-line odd line-63">  <span class="token punctuation">}</span></code>
<code class="code-line even line-64"></code>
<code class="code-line odd line-65">  <span class="token comment">/**</span></code>
<code class="code-line even line-66">   <span class="token operator">*</span> </code>
<code class="code-line odd line-67">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> node </code>
<code class="code-line even line-68">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> start </code>
<code class="code-line odd line-69">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>Number<span class="token punctuation">}</span> end </code>
<code class="code-line even line-70">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">originValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> newValue<span class="token punctuation">}</span> modifyValueFn </code>
<code class="code-line odd line-71">   <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line even line-72">  <span class="token function">updateNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> modifyValueFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line odd line-73">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span></code>
<code class="code-line even line-74">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">&gt;</span> end <span class="token operator">||</span> node<span class="token punctuation">.</span>end <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">return</span></code>
<code class="code-line odd line-75">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">&gt;=</span> start <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-76">      node<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">modifyValueFn</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code>
<code class="code-line odd line-77">      node<span class="token punctuation">.</span>isLazy <span class="token operator">=</span> <span class="token boolean">true</span></code>
<code class="code-line even line-78">      node<span class="token punctuation">.</span>LazyFns<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>modifyValueFn<span class="token punctuation">)</span></code>
<code class="code-line odd line-79">      <span class="token keyword">return</span></code>
<code class="code-line even line-80">    <span class="token punctuation">}</span></code>
<code class="code-line odd line-81">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pushDown</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span></code>
<code class="code-line even line-82">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> modifyValueFn<span class="token punctuation">)</span></code>
<code class="code-line odd line-83">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> modifyValueFn<span class="token punctuation">)</span></code>
<code class="code-line even line-84">    node<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_pushUp</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value<span class="token punctuation">,</span> node<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value<span class="token punctuation">)</span></code>
<code class="code-line odd line-85">  <span class="token punctuation">}</span></code>
<code class="code-line even line-86"></code>
<code class="code-line odd line-87">  <span class="token function">query</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-88">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span></code>
<code class="code-line odd line-89">  <span class="token punctuation">}</span></code>
<code class="code-line even line-90"></code>
<code class="code-line odd line-91">  <span class="token comment">/**</span></code>
<code class="code-line even line-92">   <span class="token operator">*</span> </code>
<code class="code-line odd line-93">   <span class="token operator">*</span> @param <span class="token punctuation">{</span>TreeNode<span class="token punctuation">}</span> node </code>
<code class="code-line even line-94">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span> start </code>
<code class="code-line odd line-95">   <span class="token operator">*</span> @param <span class="token punctuation">{</span><span class="token operator">*</span><span class="token punctuation">}</span> end </code>
<code class="code-line even line-96">   <span class="token operator">*</span><span class="token operator">/</span></code>
<code class="code-line odd line-97">  <span class="token function">queryNode</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-98">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span></code>
<code class="code-line odd line-99">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">&gt;</span> end <span class="token operator">||</span> node<span class="token punctuation">.</span>end <span class="token operator">&lt;</span> start<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span></code>
<code class="code-line even line-100">    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>start <span class="token operator">&gt;=</span> start <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>end <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> node<span class="token punctuation">.</span>value</code>
<code class="code-line odd line-101">    <span class="token keyword">else</span> <span class="token punctuation">{</span></code>
<code class="code-line even line-102">      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pushDown</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span></code>
<code class="code-line odd line-103">      <span class="token keyword">const</span> leftValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span></code>
<code class="code-line even line-104">      <span class="token keyword">const</span> rightValue <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">queryNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span></code>
<code class="code-line odd line-105">      <span class="token keyword">if</span> <span class="token punctuation">(</span>leftValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> rightValue</code>
<code class="code-line even line-106">      <span class="token keyword">if</span> <span class="token punctuation">(</span>rightValue <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> leftValue</code>
<code class="code-line odd line-107">      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_pushUp</span><span class="token punctuation">(</span>leftValue<span class="token punctuation">,</span> rightValue<span class="token punctuation">)</span></code>
<code class="code-line even line-108">    <span class="token punctuation">}</span></code>
<code class="code-line odd line-109">  <span class="token punctuation">}</span></code>
<code class="code-line even last-row line-110"><span class="token punctuation">}</span></code></pre></div></div>`,8),c=[t],k={title:null,tags:null,categories:null,description:"\u7EBF\u6BB5\u6811\u662F\u4E00\u4E2A\u5E73\u8861\u4E8C\u53C9\u6811\uFF0C\u4E14\u8282\u70B9\u4E2D\u5B58\u50A8\u7740\u533A\u95F4\u8303\u56F4\u5185\u7684\u7279\u5F81\uFF0C\u5B83\u5BF9\u533A\u95F4\u64CD\u4F5C\u590D\u6742\u5EA6\u8F83\u4F4E",publishTime:"2022-10-06T20:48:50.000Z",updateTime:null,img:null,toc:!0,comment:!0,publish:!0},r="",y=s({__name:"index",setup(l,{expose:n}){return n({frontmatter:{title:null,tags:null,categories:null,description:"\u7EBF\u6BB5\u6811\u662F\u4E00\u4E2A\u5E73\u8861\u4E8C\u53C9\u6811\uFF0C\u4E14\u8282\u70B9\u4E2D\u5B58\u50A8\u7740\u533A\u95F4\u8303\u56F4\u5185\u7684\u7279\u5F81\uFF0C\u5B83\u5BF9\u533A\u95F4\u64CD\u4F5C\u590D\u6742\u5EA6\u8F83\u4F4E",publishTime:"2022-10-06T20:48:50.000Z",updateTime:null,img:null,toc:!0,comment:!0,publish:!0},excerpt:void 0}),(u,i)=>(a(),e("div",p,c))}});export{y as default,r as excerpt,k as frontmatter};
